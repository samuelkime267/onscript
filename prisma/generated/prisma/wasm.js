
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  publishDate: 'publishDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  fid: 'fid',
  username: 'username',
  displayName: 'displayName',
  pfpUrl: 'pfpUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  signerUuid: 'signerUuid',
  isUuidApprove: 'isUuidApprove',
  signerRegDeadline: 'signerRegDeadline',
  signerPublicKey: 'signerPublicKey',
  signerApprovalUrl: 'signerApprovalUrl',
  role: 'role',
  isPremium: 'isPremium',
  premiumExpiresAt: 'premiumExpiresAt',
  dmsSentThisWeek: 'dmsSentThisWeek',
  postsThisWeek: 'postsThisWeek',
  weekResetDate: 'weekResetDate',
  lastLoginAt: 'lastLoginAt',
  loginAttempts: 'loginAttempts',
  lockedUntil: 'lockedUntil',
  lastNonceUsed: 'lastNonceUsed'
};

exports.Prisma.AutomationRuleScalarFieldEnum = {
  id: 'id',
  triggerWord: 'triggerWord',
  response: 'response',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  timesTriggered: 'timesTriggered',
  lastTriggered: 'lastTriggered'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  details: 'details',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  imageUrl: 'imageUrl',
  startDate: 'startDate',
  endDate: 'endDate',
  frequency: 'frequency',
  minStreakLength: 'minStreakLength',
  contentRequirements: 'contentRequirements',
  rewards: 'rewards',
  prizePool: 'prizePool',
  totalDonations: 'totalDonations',
  donationGoal: 'donationGoal',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId'
};

exports.Prisma.LaunchCampaignParticipantsScalarFieldEnum = {
  id: 'id',
  fid: 'fid',
  username: 'username',
  email: 'email',
  xHandle: 'xHandle',
  web3ContentWork: 'web3ContentWork',
  commitment: 'commitment',
  helpNeeded: 'helpNeeded',
  storyTellingVibe: 'storyTellingVibe',
  userId: 'userId'
};

exports.Prisma.StreakScalarFieldEnum = {
  id: 'id',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  lastParticipationDate: 'lastParticipationDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  campaignId: 'campaignId',
  userId: 'userId'
};

exports.Prisma.ParticipationScalarFieldEnum = {
  id: 'id',
  contentTitle: 'contentTitle',
  contentUrl: 'contentUrl',
  contentHash: 'contentHash',
  description: 'description',
  onchainTxHash: 'onchainTxHash',
  isVerified: 'isVerified',
  submissionDate: 'submissionDate',
  weekNumber: 'weekNumber',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  campaignId: 'campaignId',
  userId: 'userId'
};

exports.Prisma.CampaignPaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  txHash: 'txHash',
  blockNumber: 'blockNumber',
  gasUsed: 'gasUsed',
  gasPrice: 'gasPrice',
  status: 'status',
  recipientAddress: 'recipientAddress',
  verificationHash: 'verificationHash',
  nonceUsed: 'nonceUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  campaignId: 'campaignId',
  payerId: 'payerId'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  message: 'message',
  txHash: 'txHash',
  blockNumber: 'blockNumber',
  gasUsed: 'gasUsed',
  gasPrice: 'gasPrice',
  status: 'status',
  creatorShare: 'creatorShare',
  winnerShare: 'winnerShare',
  isDistributed: 'isDistributed',
  distributionTxHash: 'distributionTxHash',
  verificationHash: 'verificationHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  campaignId: 'campaignId',
  donorId: 'donorId'
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  description: 'description',
  severity: 'severity',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  metadata: 'metadata',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PostStatus = exports.$Enums.PostStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  PUBLISHED: 'PUBLISHED'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.CampaignFrequency = exports.$Enums.CampaignFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  BIWEEKLY: 'BIWEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  ENDED: 'ENDED'
};

exports.web3ContentWork = exports.$Enums.web3ContentWork = {
  YES: 'YES',
  NO: 'NO',
  KINDA: 'KINDA'
};

exports.StreakStatus = exports.$Enums.StreakStatus = {
  ACTIVE: 'ACTIVE',
  BROKEN: 'BROKEN',
  COMPLETED: 'COMPLETED'
};

exports.ParticipationStatus = exports.$Enums.ParticipationStatus = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.SecurityEventType = exports.$Enums.SecurityEventType = {
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGIN_FAILED: 'LOGIN_FAILED',
  SIGNATURE_VERIFICATION_FAILED: 'SIGNATURE_VERIFICATION_FAILED',
  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  ACCOUNT_LOCKED: 'ACCOUNT_LOCKED',
  NONCE_REUSE_ATTEMPT: 'NONCE_REUSE_ATTEMPT',
  UNAUTHORIZED_ACCESS: 'UNAUTHORIZED_ACCESS'
};

exports.SecuritySeverity = exports.$Enums.SecuritySeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  Post: 'Post',
  User: 'User',
  AutomationRule: 'AutomationRule',
  ActivityLog: 'ActivityLog',
  Campaign: 'Campaign',
  LaunchCampaignParticipants: 'LaunchCampaignParticipants',
  Streak: 'Streak',
  Participation: 'Participation',
  CampaignPayment: 'CampaignPayment',
  Donation: 'Donation',
  SecurityEvent: 'SecurityEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
